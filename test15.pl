query_box_2(T):-A="[[\"aa,]\",b,\"c\",[]],1]",string_codes(A,C),findall(G,(member(E,C),char_code(D,E),atom_string(D,G)),F),grammar1(F,T).
grammar1(U,T):-compound([],T,U,[]),!.
compound213(U,U,T,T).
compound(T,U)-->["["],["]"],compound213(T,U).
compound(T,U)-->["["],compound21(T,V),["]"],compound213(V,U).
compound212(U,U,T,T).
compound21(T,U)-->item(I),lookahead(["]"]),{wrap(I,Itemname1),append(T,Itemname1,V)},compound212(V,U).
compound21(T,U)-->item(I),[","],compound21([],Compound1name),{wrap(I,Itemname1),append(T,Itemname1,V),append(V,Compound1name,U)}.
item(T)-->["\""],word21("",T),["\""].
item(T)-->number21("",U),{stringtonumber(U,T)}.
item(T)-->word21_atom("",T1),{atom_string(T,T1)}.
item(T)-->compound([],T).
number212(U,U,T,T).
number21(T,U)-->[A],commaorrightbracketnext,{((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V)},number212(V,U).
number21(T,U)-->[A],{((stringtonumber(A,A1),number(A1))->(true);((equals4(A,".")->(true);(equals4(A,"-"))))),stringconcat(T,A,V)},number21("",Numberstring),{stringconcat(V,Numberstring,U)}.
word212(U,U,T,T).
word21(T,U)-->[A],quote_next,{not((=(A,"\""))),stringconcat(T,A,V)},word212(V,U).
word21(T,U)-->[A],{not((=(A,"\""))),stringconcat(T,A,V)},word21("",Wordstring),{stringconcat(V,Wordstring,U)}.
word212_atom(U,U,T,T).
word21_atom(T,U)-->[A],commaorrightbracketnext,{not((=(A,"\""))),not((=(A,"["))),not((=(A,"]"))),stringconcat(T,A,V)},word212_atom(V,U).
word21_atom(T,U)-->[A],{not((=(A,"\""))),not((=(A,"["))),not((=(A,"]"))),stringconcat(T,A,V)},word21_atom("",Wordstring),{stringconcat(V,Wordstring,U)}.
commaorrightbracketnext-->lookahead([","]).
commaorrightbracketnext-->lookahead(["]"]).
quote_next-->lookahead(["\""]).
lookahead(B,A,A):-append(B,D,A).

%grammar_part(A,B,C):-string_concat(A,C,B),string_length(A,1).
stringconcat(A,B,C):-string_concat(A,B,C).
stringtonumber(A,B):-number_string(B,A).
equals4(A,B):-A=B.
wrap(A,B):-B=[A].
